# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetInsurancePricesLevel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cost': 'float',
        'payout': 'float',
        'name': 'str'
    }

    attribute_map = {
        'cost': 'cost',
        'payout': 'payout',
        'name': 'name'
    }

    def __init__(self, cost=None, payout=None, name=None):  # noqa: E501
        """GetInsurancePricesLevel - a model defined in Swagger"""  # noqa: E501

        self._cost = None
        self._payout = None
        self._name = None
        self.discriminator = None

        self.cost = cost
        self.payout = payout
        self.name = name

    @property
    def cost(self):
        """Gets the cost of this GetInsurancePricesLevel.  # noqa: E501

        cost number  # noqa: E501

        :return: The cost of this GetInsurancePricesLevel.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this GetInsurancePricesLevel.

        cost number  # noqa: E501

        :param cost: The cost of this GetInsurancePricesLevel.  # noqa: E501
        :type: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def payout(self):
        """Gets the payout of this GetInsurancePricesLevel.  # noqa: E501

        payout number  # noqa: E501

        :return: The payout of this GetInsurancePricesLevel.  # noqa: E501
        :rtype: float
        """
        return self._payout

    @payout.setter
    def payout(self, payout):
        """Sets the payout of this GetInsurancePricesLevel.

        payout number  # noqa: E501

        :param payout: The payout of this GetInsurancePricesLevel.  # noqa: E501
        :type: float
        """
        if payout is None:
            raise ValueError("Invalid value for `payout`, must not be `None`")  # noqa: E501

        self._payout = payout

    @property
    def name(self):
        """Gets the name of this GetInsurancePricesLevel.  # noqa: E501

        Localized insurance level  # noqa: E501

        :return: The name of this GetInsurancePricesLevel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetInsurancePricesLevel.

        Localized insurance level  # noqa: E501

        :param name: The name of this GetInsurancePricesLevel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetInsurancePricesLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
