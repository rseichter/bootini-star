# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetCorporationsCorporationIdRolesHistory200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'character_id': 'int',
        'changed_at': 'datetime',
        'issuer_id': 'int',
        'role_type': 'str',
        'old_roles': 'list[str]',
        'new_roles': 'list[str]'
    }

    attribute_map = {
        'character_id': 'character_id',
        'changed_at': 'changed_at',
        'issuer_id': 'issuer_id',
        'role_type': 'role_type',
        'old_roles': 'old_roles',
        'new_roles': 'new_roles'
    }

    def __init__(self, character_id=None, changed_at=None, issuer_id=None, role_type=None, old_roles=None, new_roles=None):  # noqa: E501
        """GetCorporationsCorporationIdRolesHistory200Ok - a model defined in Swagger"""  # noqa: E501

        self._character_id = None
        self._changed_at = None
        self._issuer_id = None
        self._role_type = None
        self._old_roles = None
        self._new_roles = None
        self.discriminator = None

        self.character_id = character_id
        self.changed_at = changed_at
        self.issuer_id = issuer_id
        self.role_type = role_type
        self.old_roles = old_roles
        self.new_roles = new_roles

    @property
    def character_id(self):
        """Gets the character_id of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501

        The character whose roles are changed  # noqa: E501

        :return: The character_id of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this GetCorporationsCorporationIdRolesHistory200Ok.

        The character whose roles are changed  # noqa: E501

        :param character_id: The character_id of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :type: int
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")  # noqa: E501

        self._character_id = character_id

    @property
    def changed_at(self):
        """Gets the changed_at of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501

        changed_at string  # noqa: E501

        :return: The changed_at of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._changed_at

    @changed_at.setter
    def changed_at(self, changed_at):
        """Sets the changed_at of this GetCorporationsCorporationIdRolesHistory200Ok.

        changed_at string  # noqa: E501

        :param changed_at: The changed_at of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :type: datetime
        """
        if changed_at is None:
            raise ValueError("Invalid value for `changed_at`, must not be `None`")  # noqa: E501

        self._changed_at = changed_at

    @property
    def issuer_id(self):
        """Gets the issuer_id of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501

        ID of the character who issued this change  # noqa: E501

        :return: The issuer_id of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :rtype: int
        """
        return self._issuer_id

    @issuer_id.setter
    def issuer_id(self, issuer_id):
        """Sets the issuer_id of this GetCorporationsCorporationIdRolesHistory200Ok.

        ID of the character who issued this change  # noqa: E501

        :param issuer_id: The issuer_id of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :type: int
        """
        if issuer_id is None:
            raise ValueError("Invalid value for `issuer_id`, must not be `None`")  # noqa: E501

        self._issuer_id = issuer_id

    @property
    def role_type(self):
        """Gets the role_type of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501

        role_type string  # noqa: E501

        :return: The role_type of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this GetCorporationsCorporationIdRolesHistory200Ok.

        role_type string  # noqa: E501

        :param role_type: The role_type of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :type: str
        """
        if role_type is None:
            raise ValueError("Invalid value for `role_type`, must not be `None`")  # noqa: E501
        allowed_values = ["grantable_roles", "grantable_roles_at_base", "grantable_roles_at_hq", "grantable_roles_at_other", "roles", "roles_at_base", "roles_at_hq", "roles_at_other"]  # noqa: E501
        if role_type not in allowed_values:
            raise ValueError(
                "Invalid value for `role_type` ({0}), must be one of {1}"  # noqa: E501
                .format(role_type, allowed_values)
            )

        self._role_type = role_type

    @property
    def old_roles(self):
        """Gets the old_roles of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501

        old_roles array  # noqa: E501

        :return: The old_roles of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :rtype: list[str]
        """
        return self._old_roles

    @old_roles.setter
    def old_roles(self, old_roles):
        """Sets the old_roles of this GetCorporationsCorporationIdRolesHistory200Ok.

        old_roles array  # noqa: E501

        :param old_roles: The old_roles of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :type: list[str]
        """
        if old_roles is None:
            raise ValueError("Invalid value for `old_roles`, must not be `None`")  # noqa: E501
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(old_roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `old_roles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(old_roles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._old_roles = old_roles

    @property
    def new_roles(self):
        """Gets the new_roles of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501

        new_roles array  # noqa: E501

        :return: The new_roles of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :rtype: list[str]
        """
        return self._new_roles

    @new_roles.setter
    def new_roles(self, new_roles):
        """Sets the new_roles of this GetCorporationsCorporationIdRolesHistory200Ok.

        new_roles array  # noqa: E501

        :param new_roles: The new_roles of this GetCorporationsCorporationIdRolesHistory200Ok.  # noqa: E501
        :type: list[str]
        """
        if new_roles is None:
            raise ValueError("Invalid value for `new_roles`, must not be `None`")  # noqa: E501
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Terrestrial_Combat_Officer", "Terrestrial_Logistics_Officer", "Trader"]  # noqa: E501
        if not set(new_roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `new_roles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(new_roles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._new_roles = new_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCorporationsCorporationIdRolesHistory200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
