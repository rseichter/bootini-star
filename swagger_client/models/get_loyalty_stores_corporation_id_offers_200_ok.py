# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.get_loyalty_stores_corporation_id_offers_required_item import GetLoyaltyStoresCorporationIdOffersRequiredItem  # noqa: F401,E501


class GetLoyaltyStoresCorporationIdOffers200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_id': 'int',
        'type_id': 'int',
        'quantity': 'int',
        'lp_cost': 'int',
        'isk_cost': 'int',
        'ak_cost': 'int',
        'required_items': 'list[GetLoyaltyStoresCorporationIdOffersRequiredItem]'
    }

    attribute_map = {
        'offer_id': 'offer_id',
        'type_id': 'type_id',
        'quantity': 'quantity',
        'lp_cost': 'lp_cost',
        'isk_cost': 'isk_cost',
        'ak_cost': 'ak_cost',
        'required_items': 'required_items'
    }

    def __init__(self, offer_id=None, type_id=None, quantity=None, lp_cost=None, isk_cost=None, ak_cost=None, required_items=None):  # noqa: E501
        """GetLoyaltyStoresCorporationIdOffers200Ok - a model defined in Swagger"""  # noqa: E501

        self._offer_id = None
        self._type_id = None
        self._quantity = None
        self._lp_cost = None
        self._isk_cost = None
        self._ak_cost = None
        self._required_items = None
        self.discriminator = None

        self.offer_id = offer_id
        self.type_id = type_id
        self.quantity = quantity
        self.lp_cost = lp_cost
        self.isk_cost = isk_cost
        if ak_cost is not None:
            self.ak_cost = ak_cost
        self.required_items = required_items

    @property
    def offer_id(self):
        """Gets the offer_id of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501

        offer_id integer  # noqa: E501

        :return: The offer_id of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :rtype: int
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this GetLoyaltyStoresCorporationIdOffers200Ok.

        offer_id integer  # noqa: E501

        :param offer_id: The offer_id of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :type: int
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")  # noqa: E501

        self._offer_id = offer_id

    @property
    def type_id(self):
        """Gets the type_id of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501

        type_id integer  # noqa: E501

        :return: The type_id of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetLoyaltyStoresCorporationIdOffers200Ok.

        type_id integer  # noqa: E501

        :param type_id: The type_id of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :type: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def quantity(self):
        """Gets the quantity of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501

        quantity integer  # noqa: E501

        :return: The quantity of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetLoyaltyStoresCorporationIdOffers200Ok.

        quantity integer  # noqa: E501

        :param quantity: The quantity of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def lp_cost(self):
        """Gets the lp_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501

        lp_cost integer  # noqa: E501

        :return: The lp_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :rtype: int
        """
        return self._lp_cost

    @lp_cost.setter
    def lp_cost(self, lp_cost):
        """Sets the lp_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.

        lp_cost integer  # noqa: E501

        :param lp_cost: The lp_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :type: int
        """
        if lp_cost is None:
            raise ValueError("Invalid value for `lp_cost`, must not be `None`")  # noqa: E501

        self._lp_cost = lp_cost

    @property
    def isk_cost(self):
        """Gets the isk_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501

        isk_cost integer  # noqa: E501

        :return: The isk_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :rtype: int
        """
        return self._isk_cost

    @isk_cost.setter
    def isk_cost(self, isk_cost):
        """Sets the isk_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.

        isk_cost integer  # noqa: E501

        :param isk_cost: The isk_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :type: int
        """
        if isk_cost is None:
            raise ValueError("Invalid value for `isk_cost`, must not be `None`")  # noqa: E501

        self._isk_cost = isk_cost

    @property
    def ak_cost(self):
        """Gets the ak_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501

        Analysis kredit cost  # noqa: E501

        :return: The ak_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :rtype: int
        """
        return self._ak_cost

    @ak_cost.setter
    def ak_cost(self, ak_cost):
        """Sets the ak_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.

        Analysis kredit cost  # noqa: E501

        :param ak_cost: The ak_cost of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :type: int
        """

        self._ak_cost = ak_cost

    @property
    def required_items(self):
        """Gets the required_items of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501

        required_items array  # noqa: E501

        :return: The required_items of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :rtype: list[GetLoyaltyStoresCorporationIdOffersRequiredItem]
        """
        return self._required_items

    @required_items.setter
    def required_items(self, required_items):
        """Sets the required_items of this GetLoyaltyStoresCorporationIdOffers200Ok.

        required_items array  # noqa: E501

        :param required_items: The required_items of this GetLoyaltyStoresCorporationIdOffers200Ok.  # noqa: E501
        :type: list[GetLoyaltyStoresCorporationIdOffersRequiredItem]
        """
        if required_items is None:
            raise ValueError("Invalid value for `required_items`, must not be `None`")  # noqa: E501

        self._required_items = required_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLoyaltyStoresCorporationIdOffers200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
