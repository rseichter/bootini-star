# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetCharactersCharacterIdNotificationsContacts200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_id': 'int',
        'send_date': 'datetime',
        'standing_level': 'float',
        'message': 'str',
        'sender_character_id': 'int'
    }

    attribute_map = {
        'notification_id': 'notification_id',
        'send_date': 'send_date',
        'standing_level': 'standing_level',
        'message': 'message',
        'sender_character_id': 'sender_character_id'
    }

    def __init__(self, notification_id=None, send_date=None, standing_level=None, message=None, sender_character_id=None):  # noqa: E501
        """GetCharactersCharacterIdNotificationsContacts200Ok - a model defined in Swagger"""  # noqa: E501

        self._notification_id = None
        self._send_date = None
        self._standing_level = None
        self._message = None
        self._sender_character_id = None
        self.discriminator = None

        self.notification_id = notification_id
        self.send_date = send_date
        self.standing_level = standing_level
        self.message = message
        self.sender_character_id = sender_character_id

    @property
    def notification_id(self):
        """Gets the notification_id of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501

        notification_id integer  # noqa: E501

        :return: The notification_id of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this GetCharactersCharacterIdNotificationsContacts200Ok.

        notification_id integer  # noqa: E501

        :param notification_id: The notification_id of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501
        :type: int
        """
        if notification_id is None:
            raise ValueError("Invalid value for `notification_id`, must not be `None`")  # noqa: E501

        self._notification_id = notification_id

    @property
    def send_date(self):
        """Gets the send_date of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501

        send_date string  # noqa: E501

        :return: The send_date of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._send_date

    @send_date.setter
    def send_date(self, send_date):
        """Sets the send_date of this GetCharactersCharacterIdNotificationsContacts200Ok.

        send_date string  # noqa: E501

        :param send_date: The send_date of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501
        :type: datetime
        """
        if send_date is None:
            raise ValueError("Invalid value for `send_date`, must not be `None`")  # noqa: E501

        self._send_date = send_date

    @property
    def standing_level(self):
        """Gets the standing_level of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501

        A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -> Terrible | -5 -> Bad |  0 -> Neutral |  5 -> Good |  10 -> Excellent  # noqa: E501

        :return: The standing_level of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501
        :rtype: float
        """
        return self._standing_level

    @standing_level.setter
    def standing_level(self, standing_level):
        """Sets the standing_level of this GetCharactersCharacterIdNotificationsContacts200Ok.

        A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -> Terrible | -5 -> Bad |  0 -> Neutral |  5 -> Good |  10 -> Excellent  # noqa: E501

        :param standing_level: The standing_level of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501
        :type: float
        """
        if standing_level is None:
            raise ValueError("Invalid value for `standing_level`, must not be `None`")  # noqa: E501

        self._standing_level = standing_level

    @property
    def message(self):
        """Gets the message of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501

        message string  # noqa: E501

        :return: The message of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetCharactersCharacterIdNotificationsContacts200Ok.

        message string  # noqa: E501

        :param message: The message of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def sender_character_id(self):
        """Gets the sender_character_id of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501

        sender_character_id integer  # noqa: E501

        :return: The sender_character_id of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501
        :rtype: int
        """
        return self._sender_character_id

    @sender_character_id.setter
    def sender_character_id(self, sender_character_id):
        """Sets the sender_character_id of this GetCharactersCharacterIdNotificationsContacts200Ok.

        sender_character_id integer  # noqa: E501

        :param sender_character_id: The sender_character_id of this GetCharactersCharacterIdNotificationsContacts200Ok.  # noqa: E501
        :type: int
        """
        if sender_character_id is None:
            raise ValueError("Invalid value for `sender_character_id`, must not be `None`")  # noqa: E501

        self._sender_character_id = sender_character_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdNotificationsContacts200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
