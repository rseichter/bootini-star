# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.get_characters_character_id_fittings_item import GetCharactersCharacterIdFittingsItem  # noqa: F401,E501


class GetCharactersCharacterIdFittings200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fitting_id': 'int',
        'name': 'str',
        'description': 'str',
        'ship_type_id': 'int',
        'items': 'list[GetCharactersCharacterIdFittingsItem]'
    }

    attribute_map = {
        'fitting_id': 'fitting_id',
        'name': 'name',
        'description': 'description',
        'ship_type_id': 'ship_type_id',
        'items': 'items'
    }

    def __init__(self, fitting_id=None, name=None, description=None, ship_type_id=None, items=None):  # noqa: E501
        """GetCharactersCharacterIdFittings200Ok - a model defined in Swagger"""  # noqa: E501

        self._fitting_id = None
        self._name = None
        self._description = None
        self._ship_type_id = None
        self._items = None
        self.discriminator = None

        self.fitting_id = fitting_id
        self.name = name
        self.description = description
        self.ship_type_id = ship_type_id
        self.items = items

    @property
    def fitting_id(self):
        """Gets the fitting_id of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501

        fitting_id integer  # noqa: E501

        :return: The fitting_id of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501
        :rtype: int
        """
        return self._fitting_id

    @fitting_id.setter
    def fitting_id(self, fitting_id):
        """Sets the fitting_id of this GetCharactersCharacterIdFittings200Ok.

        fitting_id integer  # noqa: E501

        :param fitting_id: The fitting_id of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501
        :type: int
        """
        if fitting_id is None:
            raise ValueError("Invalid value for `fitting_id`, must not be `None`")  # noqa: E501

        self._fitting_id = fitting_id

    @property
    def name(self):
        """Gets the name of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501

        name string  # noqa: E501

        :return: The name of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCharactersCharacterIdFittings200Ok.

        name string  # noqa: E501

        :param name: The name of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501

        description string  # noqa: E501

        :return: The description of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetCharactersCharacterIdFittings200Ok.

        description string  # noqa: E501

        :param description: The description of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def ship_type_id(self):
        """Gets the ship_type_id of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501

        ship_type_id integer  # noqa: E501

        :return: The ship_type_id of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501
        :rtype: int
        """
        return self._ship_type_id

    @ship_type_id.setter
    def ship_type_id(self, ship_type_id):
        """Sets the ship_type_id of this GetCharactersCharacterIdFittings200Ok.

        ship_type_id integer  # noqa: E501

        :param ship_type_id: The ship_type_id of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501
        :type: int
        """
        if ship_type_id is None:
            raise ValueError("Invalid value for `ship_type_id`, must not be `None`")  # noqa: E501

        self._ship_type_id = ship_type_id

    @property
    def items(self):
        """Gets the items of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501

        items array  # noqa: E501

        :return: The items of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501
        :rtype: list[GetCharactersCharacterIdFittingsItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this GetCharactersCharacterIdFittings200Ok.

        items array  # noqa: E501

        :param items: The items of this GetCharactersCharacterIdFittings200Ok.  # noqa: E501
        :type: list[GetCharactersCharacterIdFittingsItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdFittings200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
