# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.get_characters_character_id_clones_home_location import GetCharactersCharacterIdClonesHomeLocation  # noqa: F401,E501
from swagger_client.models.get_characters_character_id_clones_jump_clone import GetCharactersCharacterIdClonesJumpClone  # noqa: F401,E501


class GetCharactersCharacterIdClonesOk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_clone_jump_date': 'datetime',
        'home_location': 'GetCharactersCharacterIdClonesHomeLocation',
        'last_station_change_date': 'datetime',
        'jump_clones': 'list[GetCharactersCharacterIdClonesJumpClone]'
    }

    attribute_map = {
        'last_clone_jump_date': 'last_clone_jump_date',
        'home_location': 'home_location',
        'last_station_change_date': 'last_station_change_date',
        'jump_clones': 'jump_clones'
    }

    def __init__(self, last_clone_jump_date=None, home_location=None, last_station_change_date=None, jump_clones=None):  # noqa: E501
        """GetCharactersCharacterIdClonesOk - a model defined in Swagger"""  # noqa: E501

        self._last_clone_jump_date = None
        self._home_location = None
        self._last_station_change_date = None
        self._jump_clones = None
        self.discriminator = None

        if last_clone_jump_date is not None:
            self.last_clone_jump_date = last_clone_jump_date
        if home_location is not None:
            self.home_location = home_location
        if last_station_change_date is not None:
            self.last_station_change_date = last_station_change_date
        self.jump_clones = jump_clones

    @property
    def last_clone_jump_date(self):
        """Gets the last_clone_jump_date of this GetCharactersCharacterIdClonesOk.  # noqa: E501

        last_clone_jump_date string  # noqa: E501

        :return: The last_clone_jump_date of this GetCharactersCharacterIdClonesOk.  # noqa: E501
        :rtype: datetime
        """
        return self._last_clone_jump_date

    @last_clone_jump_date.setter
    def last_clone_jump_date(self, last_clone_jump_date):
        """Sets the last_clone_jump_date of this GetCharactersCharacterIdClonesOk.

        last_clone_jump_date string  # noqa: E501

        :param last_clone_jump_date: The last_clone_jump_date of this GetCharactersCharacterIdClonesOk.  # noqa: E501
        :type: datetime
        """

        self._last_clone_jump_date = last_clone_jump_date

    @property
    def home_location(self):
        """Gets the home_location of this GetCharactersCharacterIdClonesOk.  # noqa: E501


        :return: The home_location of this GetCharactersCharacterIdClonesOk.  # noqa: E501
        :rtype: GetCharactersCharacterIdClonesHomeLocation
        """
        return self._home_location

    @home_location.setter
    def home_location(self, home_location):
        """Sets the home_location of this GetCharactersCharacterIdClonesOk.


        :param home_location: The home_location of this GetCharactersCharacterIdClonesOk.  # noqa: E501
        :type: GetCharactersCharacterIdClonesHomeLocation
        """

        self._home_location = home_location

    @property
    def last_station_change_date(self):
        """Gets the last_station_change_date of this GetCharactersCharacterIdClonesOk.  # noqa: E501

        last_station_change_date string  # noqa: E501

        :return: The last_station_change_date of this GetCharactersCharacterIdClonesOk.  # noqa: E501
        :rtype: datetime
        """
        return self._last_station_change_date

    @last_station_change_date.setter
    def last_station_change_date(self, last_station_change_date):
        """Sets the last_station_change_date of this GetCharactersCharacterIdClonesOk.

        last_station_change_date string  # noqa: E501

        :param last_station_change_date: The last_station_change_date of this GetCharactersCharacterIdClonesOk.  # noqa: E501
        :type: datetime
        """

        self._last_station_change_date = last_station_change_date

    @property
    def jump_clones(self):
        """Gets the jump_clones of this GetCharactersCharacterIdClonesOk.  # noqa: E501

        jump_clones array  # noqa: E501

        :return: The jump_clones of this GetCharactersCharacterIdClonesOk.  # noqa: E501
        :rtype: list[GetCharactersCharacterIdClonesJumpClone]
        """
        return self._jump_clones

    @jump_clones.setter
    def jump_clones(self, jump_clones):
        """Sets the jump_clones of this GetCharactersCharacterIdClonesOk.

        jump_clones array  # noqa: E501

        :param jump_clones: The jump_clones of this GetCharactersCharacterIdClonesOk.  # noqa: E501
        :type: list[GetCharactersCharacterIdClonesJumpClone]
        """
        if jump_clones is None:
            raise ValueError("Invalid value for `jump_clones`, must not be `None`")  # noqa: E501

        self._jump_clones = jump_clones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdClonesOk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
