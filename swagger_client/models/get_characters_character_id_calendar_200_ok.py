# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetCharactersCharacterIdCalendar200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'int',
        'event_date': 'datetime',
        'title': 'str',
        'importance': 'int',
        'event_response': 'str'
    }

    attribute_map = {
        'event_id': 'event_id',
        'event_date': 'event_date',
        'title': 'title',
        'importance': 'importance',
        'event_response': 'event_response'
    }

    def __init__(self, event_id=None, event_date=None, title=None, importance=None, event_response=None):  # noqa: E501
        """GetCharactersCharacterIdCalendar200Ok - a model defined in Swagger"""  # noqa: E501

        self._event_id = None
        self._event_date = None
        self._title = None
        self._importance = None
        self._event_response = None
        self.discriminator = None

        if event_id is not None:
            self.event_id = event_id
        if event_date is not None:
            self.event_date = event_date
        if title is not None:
            self.title = title
        if importance is not None:
            self.importance = importance
        if event_response is not None:
            self.event_response = event_response

    @property
    def event_id(self):
        """Gets the event_id of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501

        event_id integer  # noqa: E501

        :return: The event_id of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this GetCharactersCharacterIdCalendar200Ok.

        event_id integer  # noqa: E501

        :param event_id: The event_id of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def event_date(self):
        """Gets the event_date of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501

        event_date string  # noqa: E501

        :return: The event_date of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this GetCharactersCharacterIdCalendar200Ok.

        event_date string  # noqa: E501

        :param event_date: The event_date of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501
        :type: datetime
        """

        self._event_date = event_date

    @property
    def title(self):
        """Gets the title of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501

        title string  # noqa: E501

        :return: The title of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetCharactersCharacterIdCalendar200Ok.

        title string  # noqa: E501

        :param title: The title of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def importance(self):
        """Gets the importance of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501

        importance integer  # noqa: E501

        :return: The importance of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501
        :rtype: int
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this GetCharactersCharacterIdCalendar200Ok.

        importance integer  # noqa: E501

        :param importance: The importance of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501
        :type: int
        """

        self._importance = importance

    @property
    def event_response(self):
        """Gets the event_response of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501

        event_response string  # noqa: E501

        :return: The event_response of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501
        :rtype: str
        """
        return self._event_response

    @event_response.setter
    def event_response(self, event_response):
        """Sets the event_response of this GetCharactersCharacterIdCalendar200Ok.

        event_response string  # noqa: E501

        :param event_response: The event_response of this GetCharactersCharacterIdCalendar200Ok.  # noqa: E501
        :type: str
        """
        allowed_values = ["declined", "not_responded", "accepted", "tentative"]  # noqa: E501
        if event_response not in allowed_values:
            raise ValueError(
                "Invalid value for `event_response` ({0}), must be one of {1}"  # noqa: E501
                .format(event_response, allowed_values)
            )

        self._event_response = event_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdCalendar200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
