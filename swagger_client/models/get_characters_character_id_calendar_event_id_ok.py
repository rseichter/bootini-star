# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetCharactersCharacterIdCalendarEventIdOk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'int',
        'owner_id': 'int',
        'owner_name': 'str',
        'date': 'datetime',
        'title': 'str',
        'duration': 'int',
        'importance': 'int',
        'response': 'str',
        'text': 'str',
        'owner_type': 'str'
    }

    attribute_map = {
        'event_id': 'event_id',
        'owner_id': 'owner_id',
        'owner_name': 'owner_name',
        'date': 'date',
        'title': 'title',
        'duration': 'duration',
        'importance': 'importance',
        'response': 'response',
        'text': 'text',
        'owner_type': 'owner_type'
    }

    def __init__(self, event_id=None, owner_id=None, owner_name=None, date=None, title=None, duration=None, importance=None, response=None, text=None, owner_type=None):  # noqa: E501
        """GetCharactersCharacterIdCalendarEventIdOk - a model defined in Swagger"""  # noqa: E501

        self._event_id = None
        self._owner_id = None
        self._owner_name = None
        self._date = None
        self._title = None
        self._duration = None
        self._importance = None
        self._response = None
        self._text = None
        self._owner_type = None
        self.discriminator = None

        self.event_id = event_id
        self.owner_id = owner_id
        self.owner_name = owner_name
        self.date = date
        self.title = title
        self.duration = duration
        self.importance = importance
        self.response = response
        self.text = text
        self.owner_type = owner_type

    @property
    def event_id(self):
        """Gets the event_id of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501

        event_id integer  # noqa: E501

        :return: The event_id of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this GetCharactersCharacterIdCalendarEventIdOk.

        event_id integer  # noqa: E501

        :param event_id: The event_id of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :type: int
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def owner_id(self):
        """Gets the owner_id of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501

        owner_id integer  # noqa: E501

        :return: The owner_id of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this GetCharactersCharacterIdCalendarEventIdOk.

        owner_id integer  # noqa: E501

        :param owner_id: The owner_id of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :type: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def owner_name(self):
        """Gets the owner_name of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501

        owner_name string  # noqa: E501

        :return: The owner_name of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this GetCharactersCharacterIdCalendarEventIdOk.

        owner_name string  # noqa: E501

        :param owner_name: The owner_name of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :type: str
        """
        if owner_name is None:
            raise ValueError("Invalid value for `owner_name`, must not be `None`")  # noqa: E501

        self._owner_name = owner_name

    @property
    def date(self):
        """Gets the date of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501

        date string  # noqa: E501

        :return: The date of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this GetCharactersCharacterIdCalendarEventIdOk.

        date string  # noqa: E501

        :param date: The date of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :type: datetime
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def title(self):
        """Gets the title of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501

        title string  # noqa: E501

        :return: The title of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetCharactersCharacterIdCalendarEventIdOk.

        title string  # noqa: E501

        :param title: The title of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def duration(self):
        """Gets the duration of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501

        Length in minutes  # noqa: E501

        :return: The duration of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GetCharactersCharacterIdCalendarEventIdOk.

        Length in minutes  # noqa: E501

        :param duration: The duration of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :type: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def importance(self):
        """Gets the importance of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501

        importance integer  # noqa: E501

        :return: The importance of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :rtype: int
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this GetCharactersCharacterIdCalendarEventIdOk.

        importance integer  # noqa: E501

        :param importance: The importance of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :type: int
        """
        if importance is None:
            raise ValueError("Invalid value for `importance`, must not be `None`")  # noqa: E501

        self._importance = importance

    @property
    def response(self):
        """Gets the response of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501

        response string  # noqa: E501

        :return: The response of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this GetCharactersCharacterIdCalendarEventIdOk.

        response string  # noqa: E501

        :param response: The response of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :type: str
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")  # noqa: E501

        self._response = response

    @property
    def text(self):
        """Gets the text of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501

        text string  # noqa: E501

        :return: The text of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this GetCharactersCharacterIdCalendarEventIdOk.

        text string  # noqa: E501

        :param text: The text of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def owner_type(self):
        """Gets the owner_type of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501

        owner_type string  # noqa: E501

        :return: The owner_type of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :rtype: str
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type):
        """Sets the owner_type of this GetCharactersCharacterIdCalendarEventIdOk.

        owner_type string  # noqa: E501

        :param owner_type: The owner_type of this GetCharactersCharacterIdCalendarEventIdOk.  # noqa: E501
        :type: str
        """
        if owner_type is None:
            raise ValueError("Invalid value for `owner_type`, must not be `None`")  # noqa: E501
        allowed_values = ["eve_server", "corporation", "faction", "character", "alliance"]  # noqa: E501
        if owner_type not in allowed_values:
            raise ValueError(
                "Invalid value for `owner_type` ({0}), must be one of {1}"  # noqa: E501
                .format(owner_type, allowed_values)
            )

        self._owner_type = owner_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdCalendarEventIdOk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
