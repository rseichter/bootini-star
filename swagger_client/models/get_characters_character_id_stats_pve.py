# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetCharactersCharacterIdStatsPve(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dungeons_completed_agent': 'int',
        'dungeons_completed_distribution': 'int',
        'missions_succeeded': 'int',
        'missions_succeeded_epic_arc': 'int'
    }

    attribute_map = {
        'dungeons_completed_agent': 'dungeons_completed_agent',
        'dungeons_completed_distribution': 'dungeons_completed_distribution',
        'missions_succeeded': 'missions_succeeded',
        'missions_succeeded_epic_arc': 'missions_succeeded_epic_arc'
    }

    def __init__(self, dungeons_completed_agent=None, dungeons_completed_distribution=None, missions_succeeded=None, missions_succeeded_epic_arc=None):  # noqa: E501
        """GetCharactersCharacterIdStatsPve - a model defined in Swagger"""  # noqa: E501

        self._dungeons_completed_agent = None
        self._dungeons_completed_distribution = None
        self._missions_succeeded = None
        self._missions_succeeded_epic_arc = None
        self.discriminator = None

        if dungeons_completed_agent is not None:
            self.dungeons_completed_agent = dungeons_completed_agent
        if dungeons_completed_distribution is not None:
            self.dungeons_completed_distribution = dungeons_completed_distribution
        if missions_succeeded is not None:
            self.missions_succeeded = missions_succeeded
        if missions_succeeded_epic_arc is not None:
            self.missions_succeeded_epic_arc = missions_succeeded_epic_arc

    @property
    def dungeons_completed_agent(self):
        """Gets the dungeons_completed_agent of this GetCharactersCharacterIdStatsPve.  # noqa: E501

        dungeons_completed_agent integer  # noqa: E501

        :return: The dungeons_completed_agent of this GetCharactersCharacterIdStatsPve.  # noqa: E501
        :rtype: int
        """
        return self._dungeons_completed_agent

    @dungeons_completed_agent.setter
    def dungeons_completed_agent(self, dungeons_completed_agent):
        """Sets the dungeons_completed_agent of this GetCharactersCharacterIdStatsPve.

        dungeons_completed_agent integer  # noqa: E501

        :param dungeons_completed_agent: The dungeons_completed_agent of this GetCharactersCharacterIdStatsPve.  # noqa: E501
        :type: int
        """

        self._dungeons_completed_agent = dungeons_completed_agent

    @property
    def dungeons_completed_distribution(self):
        """Gets the dungeons_completed_distribution of this GetCharactersCharacterIdStatsPve.  # noqa: E501

        dungeons_completed_distribution integer  # noqa: E501

        :return: The dungeons_completed_distribution of this GetCharactersCharacterIdStatsPve.  # noqa: E501
        :rtype: int
        """
        return self._dungeons_completed_distribution

    @dungeons_completed_distribution.setter
    def dungeons_completed_distribution(self, dungeons_completed_distribution):
        """Sets the dungeons_completed_distribution of this GetCharactersCharacterIdStatsPve.

        dungeons_completed_distribution integer  # noqa: E501

        :param dungeons_completed_distribution: The dungeons_completed_distribution of this GetCharactersCharacterIdStatsPve.  # noqa: E501
        :type: int
        """

        self._dungeons_completed_distribution = dungeons_completed_distribution

    @property
    def missions_succeeded(self):
        """Gets the missions_succeeded of this GetCharactersCharacterIdStatsPve.  # noqa: E501

        missions_succeeded integer  # noqa: E501

        :return: The missions_succeeded of this GetCharactersCharacterIdStatsPve.  # noqa: E501
        :rtype: int
        """
        return self._missions_succeeded

    @missions_succeeded.setter
    def missions_succeeded(self, missions_succeeded):
        """Sets the missions_succeeded of this GetCharactersCharacterIdStatsPve.

        missions_succeeded integer  # noqa: E501

        :param missions_succeeded: The missions_succeeded of this GetCharactersCharacterIdStatsPve.  # noqa: E501
        :type: int
        """

        self._missions_succeeded = missions_succeeded

    @property
    def missions_succeeded_epic_arc(self):
        """Gets the missions_succeeded_epic_arc of this GetCharactersCharacterIdStatsPve.  # noqa: E501

        missions_succeeded_epic_arc integer  # noqa: E501

        :return: The missions_succeeded_epic_arc of this GetCharactersCharacterIdStatsPve.  # noqa: E501
        :rtype: int
        """
        return self._missions_succeeded_epic_arc

    @missions_succeeded_epic_arc.setter
    def missions_succeeded_epic_arc(self, missions_succeeded_epic_arc):
        """Sets the missions_succeeded_epic_arc of this GetCharactersCharacterIdStatsPve.

        missions_succeeded_epic_arc integer  # noqa: E501

        :param missions_succeeded_epic_arc: The missions_succeeded_epic_arc of this GetCharactersCharacterIdStatsPve.  # noqa: E501
        :type: int
        """

        self._missions_succeeded_epic_arc = missions_succeeded_epic_arc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdStatsPve):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
