# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetCorporationsCorporationIdShareholders200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shareholder_id': 'int',
        'shareholder_type': 'str',
        'share_count': 'int'
    }

    attribute_map = {
        'shareholder_id': 'shareholder_id',
        'shareholder_type': 'shareholder_type',
        'share_count': 'share_count'
    }

    def __init__(self, shareholder_id=None, shareholder_type=None, share_count=None):  # noqa: E501
        """GetCorporationsCorporationIdShareholders200Ok - a model defined in Swagger"""  # noqa: E501

        self._shareholder_id = None
        self._shareholder_type = None
        self._share_count = None
        self.discriminator = None

        self.shareholder_id = shareholder_id
        self.shareholder_type = shareholder_type
        self.share_count = share_count

    @property
    def shareholder_id(self):
        """Gets the shareholder_id of this GetCorporationsCorporationIdShareholders200Ok.  # noqa: E501

        shareholder_id integer  # noqa: E501

        :return: The shareholder_id of this GetCorporationsCorporationIdShareholders200Ok.  # noqa: E501
        :rtype: int
        """
        return self._shareholder_id

    @shareholder_id.setter
    def shareholder_id(self, shareholder_id):
        """Sets the shareholder_id of this GetCorporationsCorporationIdShareholders200Ok.

        shareholder_id integer  # noqa: E501

        :param shareholder_id: The shareholder_id of this GetCorporationsCorporationIdShareholders200Ok.  # noqa: E501
        :type: int
        """
        if shareholder_id is None:
            raise ValueError("Invalid value for `shareholder_id`, must not be `None`")  # noqa: E501

        self._shareholder_id = shareholder_id

    @property
    def shareholder_type(self):
        """Gets the shareholder_type of this GetCorporationsCorporationIdShareholders200Ok.  # noqa: E501

        shareholder_type string  # noqa: E501

        :return: The shareholder_type of this GetCorporationsCorporationIdShareholders200Ok.  # noqa: E501
        :rtype: str
        """
        return self._shareholder_type

    @shareholder_type.setter
    def shareholder_type(self, shareholder_type):
        """Sets the shareholder_type of this GetCorporationsCorporationIdShareholders200Ok.

        shareholder_type string  # noqa: E501

        :param shareholder_type: The shareholder_type of this GetCorporationsCorporationIdShareholders200Ok.  # noqa: E501
        :type: str
        """
        if shareholder_type is None:
            raise ValueError("Invalid value for `shareholder_type`, must not be `None`")  # noqa: E501
        allowed_values = ["character", "corporation"]  # noqa: E501
        if shareholder_type not in allowed_values:
            raise ValueError(
                "Invalid value for `shareholder_type` ({0}), must be one of {1}"  # noqa: E501
                .format(shareholder_type, allowed_values)
            )

        self._shareholder_type = shareholder_type

    @property
    def share_count(self):
        """Gets the share_count of this GetCorporationsCorporationIdShareholders200Ok.  # noqa: E501

        share_count integer  # noqa: E501

        :return: The share_count of this GetCorporationsCorporationIdShareholders200Ok.  # noqa: E501
        :rtype: int
        """
        return self._share_count

    @share_count.setter
    def share_count(self, share_count):
        """Sets the share_count of this GetCorporationsCorporationIdShareholders200Ok.

        share_count integer  # noqa: E501

        :param share_count: The share_count of this GetCorporationsCorporationIdShareholders200Ok.  # noqa: E501
        :type: int
        """
        if share_count is None:
            raise ValueError("Invalid value for `share_count`, must not be `None`")  # noqa: E501

        self._share_count = share_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCorporationsCorporationIdShareholders200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
